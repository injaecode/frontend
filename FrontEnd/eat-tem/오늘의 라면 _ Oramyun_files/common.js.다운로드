/* 오라면 모달 공용 함수 (쓰는곳에서 인스턴스 생성해야됩니다.)
 [마크업]
 * <div id="modal-name" class="ormn-modal center"> //center 클래스넣어서 적어두시면 가운데팝업, dev클래스 붙이시면 마크업때 보이게 됩니다.
	<div class="modal-inner">		
		<div class="modal-wrapper">
			<div class="modal-header">
				<a href="#" class="modal-close-btn"><span class="a11y">닫기</span></a>
			</div>
			<div class="modal-body">
				모달내용
			</div>
			<div class="modal-footer">
				<div class="btn-wrapper">
					//버튼은 갯수 상관없이 가로 배열, 모바일에서는 세로배열
					<button type="button" class="modal-btn primary">확인</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-dim"></div>
</div>
*/
function OrmnModal(element, idx){
	this.popup = $(element);
	this.popupContent = this.popup.find('.modal-wrapper')
	this.closeBtn = this.popup.find('.modal-close-btn');
	this.dim = this.popup.find('.modal-dim');
	
	idx && this.popup.css('zIndex', idx)
	this.open = function(){
		var _this = this;
		
		this.popup.show(0, function(){
			_this.dim.fadeIn(200, function(){
				_this.popupContent.fadeIn(200, function(){
					
					if(_this.popup.hasClass('center')){
						//컨텐츠 높이가 뷰포트보다 길면 class추가
						var extraHeight = 300;
						var modalHeight = _this.popupContent.height();
						var windowHeight = $(window).height();
						(modalHeight + extraHeight) > windowHeight ?  _this.popup.addClass('block') : _this.popup.addClass('flex');
					}
					
				})
			})
		})
	}
	
	this.close = function(){
		var _this = this;
		this.popup.fadeOut(200, function(){
			_this.popupContent.hide();
			_this.dim.hide();				
		})	
		
	}
	
	this.init = function(){
		var _this = this
		this.closeBtn.on('click', function(e){
			e.preventDefault();
			_this.close();
		})
		
	}
	
	this.setMsg = function(msg) {
		this.popupContent.find('.default-ment').html(msg);
	}
}